name: Spring Boot CI/CD with AWS

# 'main' 브랜치에 대한 push 이벤트 발생 시 워크플로우를 실행
on:
  push:
    branches: [ "main" ]

# 워크플로우에서 사용할 환경 변수를 정의.
env:
  PROJECT_NAME: arlabel
  BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET }}
  CODE_DEPLOY_APP_NAME: ${{ secrets.CODE_DEPLOY_APP_NAME }}
  DEPLOYMENT_GROUP_NAME: ${{ secrets.DEPLOYMENT_GROUP_NAME }}
  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

# 'build-and-deploy' 작업을 정의: 애플리케이션의 빌드와 테스트, 배포를 수행
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 작업이 실행될 Ubuntu 가상 환경을 정의
    steps:
      - uses: actions/checkout@v3 # 코드 리포지토리를 체크아웃하여 작업 공간에 복사

      - name: Set up JDK 17 # Java Development Kit 17을 설치하고 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Temurin은 AdoptOpenJDK를 대체하는 빌드
          java-version: '17' # 사용할 Java 버전을 지정

      - name: Permission for gradlew # Gradle 래퍼 스크립트에 실행 권한을 부여
        run: chmod +x ./gradlew
        shell: bash # Bash 셸에서 실행

      - name: Build Project # 프로젝트를 빌드: 클래스가 컴파일되고 패키징
        run: ./gradlew build
        shell: bash

      - name: Make Zip File # 빌드 결과물을 ZIP 파일로 압축: 해당 파일은 배포에 사용
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Test Project # 프로젝트의 테스트를 실행: 단위 테스트 및 기타 테스트가 수행
        run: ./gradlew test
        shell: bash

      - name: Configure AWS credentials # AWS CLI를 사용하기 위해 필요한 자격 증명을 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # AWS S3 액세스 키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS S3 개인 액세스 키
          aws-region: ap-northeast-2 # AWS 리전을 설정합니다.

      - name: Upload to S3 # 압축된 아티팩트를 AWS S3 버킷으로 업로드
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy To EC2 instance # AWS CodeDeploy를 사용하여 EC2 인스턴스에 애플리케이션을 배포
        run: aws deploy create-deployment
          --application-name $CODE_DEPLOY_APP_NAME
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name $DEPLOYMENT_GROUP_NAME
          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
